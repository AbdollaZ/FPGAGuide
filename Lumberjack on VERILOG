module draw(GPIO_0, clk, reset, sw, sw1, button1, button2, button3, button4, MTL2_DCLK, MTL2_R, MTL2_G, MTL2_B, MTL2_HSD, MTL2_VSD);
input clk;

// optional things
input sw;
input sw1;
input button1;
input button2;
input button3;
input button4;
inout [33:0] GPIO_0;        // GPIO INOUT!

// SIGNAL NAME USAGE FOR FPGA EXTERNAL THINGS
// if (!KEY[0]) begin ...
// if (!GPIO_0[6]) begin ...

// or we can do this
// 1. Make a pin assignment to an input variable
// 2. Enjoy a life with custom name of the variable


//things needed for MTL
input reset;
output MTL2_DCLK;
output [7:0] MTL2_R;
output [7:0] MTL2_G;
output [7:0] MTL2_B;
output MTL2_HSD;
output MTL2_VSD;

// hvsync vital part
hvsync test(
 .clk(clk25),  
 .reset(0),
 .data_enable(display_on),  
 .hsync(MTL2_HSD),
 .vsync(MTL2_VSD),  
 .hpos(hpos),
 .vpos(vpos));
 
//registers
reg [7:0] red, green, blue;
reg[11:0] sqreenMode = 0;
reg [1:0] lfsr_state;

// reg registers can be assigned in always BLOCK
// wire registers cannot be changed in always BLOCK

//things needed for programming MTL
wire res=~reset;
wire display_on;
wire [11:0] hpos; // horizontal pixels position of the display
wire [11:0] vpos; // horizontal pixels position of the display
reg clk25 = 0;

// clk start
always @(posedge clk) clk25<=~clk25;

// Declaration of RNG and related logic
reg [15:0] lfsr = 16'hACE1;  // Initial value of LFSR
//localparam random_bit1;

// Update the LFSR value every clock cycle to generate new random values
always @(posedge clk) begin
    lfsr <= {lfsr[14:0], lfsr[15] ^ lfsr[5] ^ lfsr[4] ^ lfsr[3]};
end

wire[11:0] random_bit1 = lfsr[0]; // Use the LSB as the random bit
wire random_bit = random_bit1 == 1;

 //thing needed to set up the screen
localparam LINE = 799;
localparam SCREEN = 479;
wire data_enable = ((hpos <= LINE && hpos >= 0) && (vpos <= SCREEN && vpos >= 0));

localparam treeSize = 150; //one side of a square of the trunk!
localparam halflife = 80;

localparam treeBranch = halflife;
reg[11:0] treeBranch_hpos = 85;
reg[11:0] treeBranch_vpos = 315;

localparam treeBranch2 = halflife;
reg[11:0] treeBranch2_hpos = 235;
reg[11:0] treeBranch2_vpos = 85;

localparam treeBranch3 = halflife;
reg[11:0] treeBranch3_hpos = 385;
reg[11:0] treeBranch3_vpos = 85;

localparam treeBranch4 = halflife;
reg[11:0] treeBranch4_hpos = 535;
reg[11:0] treeBranch4_vpos = 315;

reg[11:0] counter = 0;
reg[11:0] divisor = 0;
reg[11:0] game_lost = 0;
localparam game_lost1 = 0;
// The things assigned outside the always blocks (loops) are constant. While everything inside always blocks is refreshing in a some rate

// MTL LOOP
always @(negedge MTL2_VSD) begin
  
  game_lost = game_lost1;
   if (counter != 20) begin
      counter = counter + 1;
   end
  
		if (counter == 20 && sqreenMode == 1) begin
			if((!button1 || !GPIO_0[9]) && divisor  != 0) begin  

					if (treeBranch4_vpos < 240) begin
						game_lost = 1;
					end
					
					treeBranch4_hpos = treeBranch4_hpos + treeSize;
					
					treeBranch3_hpos = treeBranch3_hpos + treeSize;
					treeBranch4_hpos = treeBranch3_hpos;
					treeBranch4_vpos = treeBranch3_vpos;
					
					treeBranch2_hpos = treeBranch2_hpos + treeSize;
					treeBranch3_hpos = treeBranch2_hpos;
					treeBranch3_vpos = treeBranch2_vpos;
					
					treeBranch_hpos = treeBranch_hpos + treeSize;
					treeBranch2_hpos = treeBranch_hpos;
					treeBranch2_vpos = treeBranch_vpos;

					if (random_bit) begin
						treeBranch_vpos = 315;  // Position on the left side
					end
					
					else if (!random_bit) begin
						 treeBranch_vpos = 85; // Position on the right side, ensuring it's visible within 800 pixels
					end
						treeBranch_hpos = 85;
						counter = 0;
			end
			
			if((!button2 || !GPIO_0[8]) && divisor != 0) begin 
					
					if (treeBranch4_vpos > 240) begin
						game_lost = 1;
					end
					
					treeBranch4_hpos = treeBranch4_hpos + treeSize;
					
					treeBranch3_hpos = treeBranch3_hpos + treeSize;
					treeBranch4_hpos = treeBranch3_hpos;
					treeBranch4_vpos = treeBranch3_vpos;
					
					treeBranch2_hpos = treeBranch2_hpos + treeSize;
					treeBranch3_hpos = treeBranch2_hpos;
					treeBranch3_vpos = treeBranch2_vpos;
					
					treeBranch_hpos = treeBranch_hpos + treeSize;
					treeBranch2_hpos = treeBranch_hpos;
					treeBranch2_vpos = treeBranch_vpos;
					
					if (random_bit) begin
						treeBranch_vpos = 315;  // Position on the left side
					end
					
					else if (!random_bit) begin
						 treeBranch_vpos = 85; // Position on the right side, ensuring it's visible within 800 pixels
					end  
					treeBranch_hpos = 85;
					counter = 0;
			end
			
			if (divisor == 0) begin
				divisor = divisor + 1;
			end
		end

end

  
  // !!!
  // SUCH notation is IMPORTANT FOR CODING MOVING PARTS!
  // !!!
  
  wire treeBranch_gfx = ((hpos - treeBranch_hpos) < halflife) && ((vpos - treeBranch_vpos) < halflife);

  wire treeBranch2_gfx = ((hpos - treeBranch2_hpos) < halflife) && ((vpos - treeBranch2_vpos) < halflife);

  wire treeBranch3_gfx = ((hpos - treeBranch3_hpos) < halflife) && ((vpos - treeBranch3_vpos) < halflife);

  wire treeBranch4_gfx = ((hpos - treeBranch4_hpos) < halflife) && ((vpos - treeBranch4_vpos) < halflife);
  
  // SCREEN LOOP
  always @(posedge clk25)begin

		if (sqreenMode == 0) begin
//			
		   if (
				(
					((hpos - 50 < 50) 
				&& 
					(vpos - 420 < 10)) 
				||
					((hpos - 90 < 10) 
				&& 
					(vpos - 405 < 25)) 
// L is completed
				||
					((hpos - 90 < 10)
				&&
					(vpos - 355 < 25))
				||
					((hpos - 70 < 30)
				&&
					(vpos - 380 < 10))
				||
					((hpos - 70 < 30)
				&&
					(vpos - 355 < 10))
// U is completed				
				||
					((hpos - 70 < 10)
				&&
					(vpos - 280 < 50))
				||
					((hpos - 70 < 30)
				&&
					(vpos - 280 < 10))
				||
					((hpos - 70 < 30)
				&&
					(vpos - 300 < 10))
				||
					((hpos - 70 < 30)
				&&
					(vpos - 320 < 10))
//M is completed
				||
					((hpos - 50 < 50)
				&&
					(vpos - 245 < 10))
				||
					((hpos - 70 < 30)	
				&&
					(vpos - 225 < 10))
				||
					((hpos - 70 < 10)
				&&
					(vpos - 225 < 30))
				||
					((hpos - 70 < 30)
				&&
					(vpos - 245 < 10))
				||
					((hpos - 90 < 10)
				&&
					(vpos - 225 < 30))
//B is completed
				||
					((hpos - 70 < 30)
				&&
					(vpos - 190 < 10))
				||
					((hpos - 70 < 6)
				&&
					(vpos - 170 < 20))
				||
					((hpos - 70 < 12)
				&&
					(vpos - 170 < 6))
				||
					((hpos - 82 < 6)
				&&
					(vpos - 170 < 20))
				||
					((hpos - 94 < 6)
				&&
					(vpos - 170 < 20))
//E is completed
				||
					((hpos - 70 < 30)
				&&
					(vpos - 130 < 10))
				||
					((hpos - 70 < 10)
				&&
					(vpos - 110 < 30))	
//R is completed 		
				)
				&& 
					data_enable
				) 
				begin
				red <= 8'hee;
				green <= 8'hee;
				blue <= 8'hee;
			end
			
			else if(
				(
					((hpos - 150 < 50)
				&&
					(vpos - 220 < 10))
				||
					((hpos - 150 < 10)
				&&
					(vpos - 220 < 40))
				||
					((hpos - 190 < 10)
				&&
					(vpos - 220 < 30))
				||
					((hpos - 180 < 20)
				&&
					(vpos - 240 < 10))
//J is completed
				||
					((hpos - 170 < 30)
				&&
					(vpos - 165 < 10))
				||
					((hpos - 170 < 6)
				&&
					(vpos - 165 < 30))
				||
					((hpos - 182 < 6 )
				&&
					(vpos - 165 < 30))
				||
					((hpos - 194 < 6)
				&&
					(vpos - 165 < 30))
				||
					((hpos - 182 < 18)
				&&
					(vpos - 189 < 6))
//A is completed
				||
					((hpos - 170 < 10)
				&&
					(vpos - 110 < 30))
				||
					((hpos - 170 < 30)
				&&
					(vpos - 130 < 10))
				||
					((hpos - 190 < 10)
				&&
					(vpos - 110 < 30))
//C is completed
				||
					((hpos - 170 < 10)
				&&
					(vpos - 55 < 30))
				||
					((hpos - 190 < 10)
				&&
					(vpos - 55 < 30))
				||
					((hpos - 140 < 60)
				&&
					(vpos - 75 < 10))	
//K is completed
				)
				)
				begin
				red <= 8'hee;
				green <= 8'h00;
				blue <= 8'h00;
			end				
			
			else begin
				red <=8'd0;  
				green <=8'd0;      
				blue <=8'd0;
			end
		end
		
		
		
		if((!GPIO_0[9] || !button2 || !GPIO_0[8] || !button1) && sqreenMode == 0) begin
			sqreenMode = sqreenMode + 1;
		end	
		
		
		
		
		if (sqreenMode == 1) begin
				
			// Manual coding of Tree Main Trunk!
			if( 
					((hpos - 0 < 800)
				&&
					(vpos - 165 < 150))
				&& 
				data_enable) begin
				red <= 8'h82;
				green <= 8'h41;
				blue <= 8'h1f;
			end
			
			// Coding of Tree Branches!
			else if(treeBranch_gfx && data_enable) begin
				red <= 8'h46;
				green <= 8'hce;
				blue <= 8'h2f;
			end
			
			// Coding of Tree Branches!
			else if(treeBranch2_gfx && data_enable) begin
				red <= 8'h46;
				green <= 8'hce;
				blue <= 8'h2f;
			end
			
			// Coding of Tree Branches!
			else if(treeBranch3_gfx && data_enable) begin
				red <= 8'h46;
				green <= 8'hce;
				blue <= 8'h2f;
			end
			
			// Coding of Tree Branches!
			else if(treeBranch4_gfx && data_enable) begin
				red <= 8'h46;
				green <= 8'hce;
				blue <= 8'h2f;
			end
			
			// Else is dark
			else begin
				red <=8'd0;  
				green <=8'd0;      
				blue <=8'd0;
			end
			
		end
		
		// If Game was on the screen and a player loses the game, we enter screen 2 (Game Over)
		if(sqreenMode == 1 && game_lost == 1) begin
			sqreenMode = sqreenMode + 1;
		end
		//
		if (sqreenMode == 2) begin
			if(
					(
					((hpos - 260 < 20)
					&&
					(vpos - 355 < 70))
					||
					((hpos - 260 < 110)
					&&
					(vpos - 405 < 20))
					|| 
					((hpos - 350 < 20)
					&&
					(vpos - 355 < 70))
					|| 
					((hpos - 305 < 20)
					&&
					(vpos - 355 < 40))
					|| 
					((hpos - 305 < 45)
					&&
					(vpos - 355 < 20))
// G is completed
					||
					((hpos - 260 < 20)
					&&
					(vpos - 255 < 70))
					||
					((hpos - 260 < 110)
					&&
					(vpos - 255 < 20))
					|| 
					((hpos - 260 < 110)
					&&
					(vpos - 315 < 20))
					|| 
					((hpos - 335 < 20)
					&&
					(vpos - 255 < 70))
// A is completed
					||
					((hpos - 260 < 20)
					&&
					(vpos - 150 < 70))
					||
					((hpos - 260 < 110)
					&&
					(vpos - 210 < 15))
					|| 
					((hpos - 260 < 110)
					&&
					(vpos - 180 < 15))
					|| 
					((hpos - 260 < 110)
					&&
					(vpos - 150 < 15))
// M is completed
					||
					((hpos - 260 < 20)
					&&
					(vpos - 55 < 70))
					||
					((hpos - 260 < 110)
					&&
					(vpos - 105 < 20))
					|| 
					((hpos - 305 < 20)
					&&
					(vpos - 55 < 70))
					|| 
					((hpos - 350 < 20)
					&&
					(vpos - 55 < 70))
					
// E is completed

					||
					((hpos - 430 < 20)
					&&
					(vpos - 345 < 80))
					||
					((hpos - 520 < 20)
					&&
					(vpos - 345 < 80))
					|| 
					((hpos - 430 < 110)
					&&
					(vpos - 405 < 20))
					|| 
					((hpos - 430 < 110)
					&&
					(vpos - 345 < 20))
					
// O is completed			
					||
					((hpos - 430 < 70)
					&&
					(vpos - 315 < 20))
					||
					((hpos - 430 < 70)
					&&
					(vpos - 255 < 20))
					|| 
					((hpos - 480 < 20)
					&&
					(vpos - 255 < 80))
					|| 
					((hpos - 500 < 20)
					&&
					(vpos - 275 < 40))
					||
					((hpos - 520 < 20)
					&&
					(vpos - 280 < 30))
					
// V is completed
	
					||
					((hpos - 430 < 110)
					&&
					(vpos - 205 < 20))
					||
					((hpos - 430 < 20)
					&&
					(vpos - 145 < 80))
					|| 
					((hpos - 475 < 20)
					&&
					(vpos - 145 < 20))
					|| 
					((hpos - 520 < 20)
					&&
					(vpos - 145 < 80))
					
// E is completed

					||
					((hpos - 430 < 20)
					&&
					(vpos - 35 < 80))
					||
					((hpos - 430 < 110)
					&&
					(vpos - 95 < 20))
					
// R is completed
					)
					&&
					 data_enable
					)
					begin
						 red <= 8'hee;
						 green <= 8'hee;
						 blue <= 8'hee;
						end
					else begin
						red <=8'd0;  
						green <=8'd0;      
						blue <=8'd0;
					end
		end
				
				
		// If screen 2 (Game Over) is on, we can press restart button (button3) to change screen mode to main menu
		if(sqreenMode == 2 && !button3) begin
			sqreenMode = sqreenMode - 2;
		end
		//
		if(!button4) begin
			sqreenMode = 5;
		end
		
		
		if(sqreenMode == 5) begin
			if ((hpos - 0 < 100)
				&&
				(vpos - 0 < 100) 
				&& 
				data_enable)begin
				red <= 8'h82;
				green <= 8'h41;
				blue <= 8'h1f;
			end
			else begin
				red <=8'd0;  
				green <=8'd0;      
				blue <=8'd0;
			end
		end

		

  end 
  
      
	assign MTL2_DCLK=clk25;
	assign MTL2_R=red;  
	assign MTL2_G=green;
	assign MTL2_B=blue;
	
	endmodule
